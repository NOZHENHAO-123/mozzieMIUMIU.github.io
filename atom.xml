<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>miumiu是一只猫</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-11-25T12:37:25.072Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>es6一些</title>
    <link href="http://yoursite.com/2017/11/20/es6/"/>
    <id>http://yoursite.com/2017/11/20/es6/</id>
    <published>2017-11-19T16:01:00.000Z</published>
    <updated>2017-11-25T12:37:25.072Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>好记性不如烂笔头</p></blockquote><h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><blockquote><p>1.使用let声明的变量，只在命令所在的代码块内以有效；<br>2.使用let命令声明的变量在域解析的时候不会被提升；<br>3.let不允许在同一个作用域下声明已经存在的变量。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(a) //a is not defined</span><br><span class="line">let a = 1</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(a) //undefined</span><br><span class="line">var a = 1</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">//在循环语句之内是一个父作用域，在循环体之中是一个子作用域</span><br><span class="line">for(let i=0;i&lt;3;i++)&#123;</span><br><span class="line">    let i = 10;</span><br><span class="line">    console.log(i); //3*10</span><br><span class="line">&#125;</span><br><span class="line">console.log(i); // i is not defined</span><br><span class="line"></span><br><span class="line">//es5点击循环0，1，2的处理方式1</span><br><span class="line">for(var i=0;i&lt;btns.length;i++)&#123;</span><br><span class="line">    btns[i].index = i;</span><br><span class="line">    btns[i].onclick = function () &#123;</span><br><span class="line">        console.log(this.index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//es5点击循环0，1，2的处理方式2</span><br><span class="line">for(var i=0;i&lt;btns.length;i++)&#123;</span><br><span class="line">    btns[i].index = i;</span><br><span class="line">    (function (i) &#123;</span><br><span class="line">        btns[i].onclick = function () &#123;</span><br><span class="line">            console.log(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)(i)</span><br><span class="line">&#125;</span><br><span class="line">//es6</span><br><span class="line">for(let i=0;i&lt;btns.length;i++)&#123;</span><br><span class="line">    btns[i].onclick = function () &#123;</span><br><span class="line">        console.log(i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="const"><a href="#const" class="headerlink" title="const"></a>const</h3><blockquote><p>1.使用let声明的变量，只在命令所在的代码块内以有效<br>2.使用let命令声明的变量在域解析的时候不会被提升。<br>3.let不允许在同一个作用域下声明已经存在的变量。<br>4.声明的时候必须赋值。<br>5.储存简单的数据类型不可改变其值，储存的是对象，对象引用不可以被改变，对象里面的数据如何变化，是没有关系的。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const a = 1;</span><br><span class="line">a = 2; //报错</span><br><span class="line"></span><br><span class="line">const obj = &#123;a:10&#125;;</span><br><span class="line">obj.a = 20;</span><br><span class="line">console.log(obj) //&#123;a:20&#125;</span><br></pre></td></tr></table></figure><h3 id="变量的结构赋值"><a href="#变量的结构赋值" class="headerlink" title="变量的结构赋值"></a>变量的结构赋值</h3><blockquote><p>本质上是一种匹配模式，只要等号两边的模式相同，那么左边的变量就可以被赋予对应的值。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let[a,b,c] = [1,2,3];</span><br><span class="line">console.log(a,b,c) //1 2 3</span><br></pre></td></tr></table></figure><p>主要分为：<br>1.数组的结构赋值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">let [a,[[b],c]] = [1,[[2],3]]</span><br><span class="line">console.log(a,b,c) //1 2 3</span><br><span class="line"></span><br><span class="line">let [,,c] =[1,2,3]</span><br><span class="line">console.log(c) //3</span><br><span class="line"></span><br><span class="line">let [x] = [];</span><br><span class="line">console.log(x) //undefined (结构不成功</span><br><span class="line"></span><br><span class="line">let [x =1 ] = []</span><br><span class="line">console.log(x)  //1 (执行默认值</span><br></pre></td></tr></table></figure></p><p>2.对象的结构赋值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let &#123;a,b&#125; = &#123;b:&apos;bbb&apos;,a:&apos;aaa&apos;&#125;</span><br><span class="line">console.log(a,b) //aaa bbb</span><br><span class="line"></span><br><span class="line">let &#123;a:b&#125; = &#123;a:1&#125;</span><br><span class="line">console.log(b) //1</span><br></pre></td></tr></table></figure></p><p>3.基本类型的结构赋值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let [a,b,c,d] = &apos;1234&apos;</span><br><span class="line">console.log(a,b,c,d) //1 2 3 4</span><br><span class="line"></span><br><span class="line">let &#123;length:len&#125; = &apos;miumiu&apos;</span><br><span class="line">console.log(len) //6</span><br></pre></td></tr></table></figure></p><p>4.null和undefined 不能进行结构赋值</p><h3 id="数据结构Set"><a href="#数据结构Set" class="headerlink" title="数据结构Set"></a>数据结构Set</h3><blockquote><p>集合是由一组无序且唯一（不能重复）的项组成，这个数据结构使用了有限集合相同的数据概念，应用在计算机的数据结构中。</p></blockquote><p>特点：key和value相同，没有重复的value<br>1.创建一个Set<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const s = new Set([1,2,3])</span><br><span class="line">console.log(s)</span><br></pre></td></tr></table></figure></p><p>2.Set类的属性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(s.size) //3</span><br></pre></td></tr></table></figure></p><p>3.Set类的方法</p><blockquote><p>1.Set.add(value) 添加一个数据，返回Set结构本身</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s.add(&apos;a&apos;).add(&apos;b&apos;)</span><br><span class="line">console.log(s)</span><br></pre></td></tr></table></figure><blockquote><p>2.Set.delete(value) 删除一个数据，返回布尔值，表示删除是否成功</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.delete(&apos;a&apos;)</span><br></pre></td></tr></table></figure><blockquote><p>3.Set.has(value) 判断该值是否为Set的成员，返回一个布尔值</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(s.has(&apos;a&apos;)) //false</span><br></pre></td></tr></table></figure><blockquote><p>4.Set.clear(value) 清除所有数据，没有返回值</p><p>5.key() 返回键名的遍历器</p><p>6.value() 返回键值的遍历器</p><p>7.entries() 返回键值对的遍历器</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(s.entries()) //&#123;[1,1],[2,2]&#125;</span><br></pre></td></tr></table></figure><blockquote><p>8.forEach() 使用回调函数遍历每个成员</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">s.forEach(function (value,kye,set) &#123;</span><br><span class="line">    console.log(value)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>利用特性去重</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1,2,3,4,54,54,3,4]</span><br><span class="line">var b = new Set(arr);</span><br><span class="line">console.log(b)</span><br></pre></td></tr></table></figure><h3 id="数据结构map"><a href="#数据结构map" class="headerlink" title="数据结构map"></a>数据结构map</h3><blockquote><p>用来储存不重复key和hash结构。不同于集合（set）的是，所使用的是 [ 键，值]的形式来储存数据的。</p></blockquote><p>1.创建一个Map<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const map = new Map([</span><br><span class="line">    [&apos;a&apos;,1],</span><br><span class="line">    [&apos;b&apos;,2]</span><br><span class="line">])</span><br><span class="line">console.log(map)</span><br></pre></td></tr></table></figure></p><p>2.Map类的属性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(map.size) //2</span><br></pre></td></tr></table></figure></p><p>3.Map类的方法</p><blockquote><p>1.set(key,value) </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map.set(&apos;miumiu&apos;,&apos;m&apos;)</span><br></pre></td></tr></table></figure><blockquote><p>2.get(key) 读取key对应的键值</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map.get(&apos;a&apos;) //1</span><br></pre></td></tr></table></figure><blockquote><p>3.delete(key) 删除成功返回true</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map.delete(&apos;a&apos;) //true</span><br></pre></td></tr></table></figure><blockquote><p>4 has(key)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map.has(&apos;a&apos;)</span><br></pre></td></tr></table></figure><blockquote><p>5 clear() 清除</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map.clear()</span><br></pre></td></tr></table></figure><blockquote><p>6 同上5678</p></blockquote><p>tip:map里面的key的排列顺序是按照添加顺序进行排列的。</p><p>…………待更</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;好记性不如烂笔头&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;let&quot;&gt;&lt;a href=&quot;#let&quot; class=&quot;headerlink&quot; title=&quot;let&quot;&gt;&lt;/a&gt;let&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;1.使用let声明的
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>webpack一些</title>
    <link href="http://yoursite.com/2017/11/14/webpack/"/>
    <id>http://yoursite.com/2017/11/14/webpack/</id>
    <published>2017-11-13T16:00:00.000Z</published>
    <updated>2017-11-25T12:38:23.539Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>好记性不如烂笔头</p></blockquote><h3 id="cnpm-init-y"><a href="#cnpm-init-y" class="headerlink" title="cnpm init -y"></a>cnpm init -y</h3><p>初始化生成package.json<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;webpack-test&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;webpack.config.js&quot;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;keywords&quot;: [],</span><br><span class="line">  &quot;author&quot;: &quot;&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;ISC&quot;,</span><br><span class="line">  &quot;devDependencies&quot;: &#123;</span><br><span class="line">    &quot;webpack&quot;: &quot;^3.8.1&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="cnpm-i-D-webpack-安装webpack"><a href="#cnpm-i-D-webpack-安装webpack" class="headerlink" title="cnpm i -D webpack  安装webpack"></a>cnpm i -D webpack  安装webpack</h3><p>配置dev命令，cnpm run dev 执行打包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;,</span><br><span class="line">    &quot;dev&quot;:&quot;webpack&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><h3 id="cnpm-i-D-html-webpack-plugin-插件"><a href="#cnpm-i-D-html-webpack-plugin-插件" class="headerlink" title="cnpm i -D html-webpack-plugin 插件"></a>cnpm i -D html-webpack-plugin 插件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//自动生成一个html文件</span><br><span class="line">plugins:[</span><br><span class="line">    new htmlWebpackPlugin(&#123;</span><br><span class="line">        filename:&apos;index.html&apos;,</span><br><span class="line">        template:&apos;src/index.html&apos;</span><br><span class="line">    &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="cnpm-i-D-babel-loader-babel-core"><a href="#cnpm-i-D-babel-loader-babel-core" class="headerlink" title="cnpm i -D babel-loader babel-core"></a>cnpm i -D babel-loader babel-core</h3><p>babel:强大的编译器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><h3 id="cnpm-i-D-webpack-dev-server-开启服务器"><a href="#cnpm-i-D-webpack-dev-server-开启服务器" class="headerlink" title="cnpm i -D webpack-dev-server 开启服务器"></a>cnpm i -D webpack-dev-server 开启服务器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">devServer:&#123;</span><br><span class="line">    open:true,  //自动打开</span><br><span class="line">    port:9000   //端口号</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="cnpm-i-D-css-loader-处理css文件"><a href="#cnpm-i-D-css-loader-处理css文件" class="headerlink" title="cnpm i -D css-loader 处理css文件"></a>cnpm i -D css-loader 处理css文件</h3><blockquote><p>使用css-loader需要安装style-loader 插入到结构里面</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">module:&#123;</span><br><span class="line">    rules:[&#123;</span><br><span class="line">        test:/\.css$/,</span><br><span class="line">        use:[&apos;style-loader&apos;,&apos;css-loader&apos;]</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="cnpm-i-D-file-loader"><a href="#cnpm-i-D-file-loader" class="headerlink" title="cnpm i -D file-loader"></a>cnpm i -D file-loader</h3><blockquote><p>file-loader要做的事：<br>1.把资源移动到输出目录<br>2.返回最终引入资源的url</p></blockquote><p>处理图片<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">module:&#123;</span><br><span class="line">    rules:[&#123;</span><br><span class="line">        test:/\.(png|jpg|gif|jpeg)/,</span><br><span class="line">         use:[&apos;file-loader&apos;]</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><p>引入字体<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">module:&#123;</span><br><span class="line">    rules:[&#123;</span><br><span class="line">        test:/\.(eot|svg|ttf|woff)/,</span><br><span class="line">         use:[&apos;file-loader&apos;]</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><h3 id="cnpm-i-D-url-loader"><a href="#cnpm-i-D-url-loader" class="headerlink" title="cnpm i -D url-loader"></a>cnpm i -D url-loader</h3><p>是把图片处理base64位<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">module:&#123;</span><br><span class="line">    rules:[&#123;</span><br><span class="line">        test:/\.(png|jpg|gif|jpeg)/,</span><br><span class="line">        use:[&#123;</span><br><span class="line">            loader:&apos;url-loader&apos;,</span><br><span class="line">            options:&#123;</span><br><span class="line">                limit:10000     //大约图片小于10kb对其base64打包</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><h3 id="cnpm-i-D-sass-loader-node-sass-处理suss文件"><a href="#cnpm-i-D-sass-loader-node-sass-处理suss文件" class="headerlink" title="cnpm i -D sass-loader node-sass 处理suss文件"></a>cnpm i -D sass-loader node-sass 处理suss文件</h3><p>（cnpm i -D less-loader less 处理less文件）<br>sass-loader插件依赖于node-sass安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">module:&#123;</span><br><span class="line">    rules:[&#123;</span><br><span class="line">        &#123;</span><br><span class="line">            test:/\.scss$/,</span><br><span class="line">            use:[&apos;style-loader&apos;,&apos;css-loader&apos;,&apos;sass-loader&apos;] //sass转成css，使用css-loader需要安装style-loader 插入到结构里面</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;好记性不如烂笔头&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;cnpm-init-y&quot;&gt;&lt;a href=&quot;#cnpm-init-y&quot; class=&quot;headerlink&quot; title=&quot;cnpm init -y&quot;&gt;&lt;/a&gt;cnpm init
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Date日期对象</title>
    <link href="http://yoursite.com/2017/11/10/%E6%97%B6%E9%97%B4%E5%A4%84%E7%90%86/"/>
    <id>http://yoursite.com/2017/11/10/时间处理/</id>
    <published>2017-11-10T03:34:14.000Z</published>
    <updated>2017-11-25T12:39:49.079Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>好记性不如烂笔头<br>获取当前系统时间并以字符串的方式传给后台，发现了一个toLocaleString方法<br>之前没有注意过，今天又翻W3上看了看。这样就很棒棒哦。</p></blockquote><p>直接使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">let atBefore = new Date();</span><br><span class="line">console.log(atBefore.toLocaleDateString()) // 2017/11/17</span><br></pre></td></tr></table></figure></p><h3 id="日期比较"><a href="#日期比较" class="headerlink" title="日期比较"></a>日期比较</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">let atBefore = new Date(&apos;2017,11,17 18:50:20&apos;);</span><br><span class="line">//let atBefore = new Date(2017,11,17); 这种写法月份要已加过1的 实则是&apos;2017,12,17&apos;</span><br><span class="line">let today = new Date();</span><br><span class="line"></span><br><span class="line">if (atBefore&gt;=today) &#123;</span><br><span class="line">    console.log(&quot;比当前时间时间大，或者相等&quot;);</span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">    console.log(&quot;比当前时间小&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="显示当前时间（带有一个判断数值是否小于-10-的函数）"><a href="#显示当前时间（带有一个判断数值是否小于-10-的函数）" class="headerlink" title="显示当前时间（带有一个判断数值是否小于 10 的函数）"></a>显示当前时间（带有一个判断数值是否小于 10 的函数）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function checkTime(i)&#123;</span><br><span class="line">if (i&lt;10) </span><br><span class="line">  &#123;i=&quot;0&quot; + i&#125;</span><br><span class="line">  return i</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="常用的日期方法"><a href="#常用的日期方法" class="headerlink" title="常用的日期方法"></a>常用的日期方法</h3><table><thead><tr><th>方法</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td>getDate()</td><td style="text-align:center">返回月份的某一天</td></tr><tr><td>getDay()</td><td style="text-align:center">返回表示星期的某一天的数字</td></tr><tr><td>getMonth()</td><td style="text-align:center">返回表示月份的数字</td></tr><tr><td>getFullYear</td><td style="text-align:center">返回一个表示年份的 4 位数字</td></tr><tr><td>getHours()</td><td style="text-align:center">返回时间的小时字段</td></tr><tr><td>getMinutes()</td><td style="text-align:center">返回时间的分钟字段</td></tr><tr><td>getSeconds()</td><td style="text-align:center">返回时间的秒</td></tr><tr><td>getMilliseconds</td><td style="text-align:center">返回时间的毫秒</td></tr><tr><td>getTime</td><td style="text-align:center">返回距 1970 年 1 月 1 日之间的毫秒数</td></tr><tr><td>setDate()</td><td style="text-align:center">设置一个月的某一天</td></tr><tr><td>setMonth()</td><td style="text-align:center">设置一个月的某一天</td></tr><tr><td>setDate()</td><td style="text-align:center">设置月份</td></tr><tr><td>setHours()</td><td style="text-align:center">设置指定的时间的小时字段</td></tr><tr><td>setSeconds()</td><td style="text-align:center">调整过的日期的毫秒</td></tr><tr><td>setMilliseconds</td><td style="text-align:center">设置指定时间的毫秒字段</td></tr><tr><td>setTime()</td><td style="text-align:center">以毫秒设置 Date 对象</td></tr><tr><td>toString()</td><td style="text-align:center">对象转换为字符串，并返回结果</td></tr><tr><td>toLocaleString()</td><td style="text-align:center">本地时间把 Date 对象转换为字符串</td></tr><tr><td>toLocaleTimeString()</td><td style="text-align:center">本地时间把 Date 对象转换为字符串</td></tr><tr><td>toLocaleString()</td><td style="text-align:center">本地时间把 Date 对象的时间部分转换为字符串，并返回结果</td></tr><tr><td>toLocaleDateString</td><td style="text-align:center">本地时间把 Date 对象的日期部分转换为字符串，并返回结果</td></tr></tbody></table><p>w3school：<a href="http://www.w3school.com.cn/jsref/jsref_obj_date.asp" target="_blank" rel="noopener">http://www.w3school.com.cn/jsref/jsref_obj_date.asp</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;好记性不如烂笔头&lt;br&gt;获取当前系统时间并以字符串的方式传给后台，发现了一个toLocaleString方法&lt;br&gt;之前没有注意过，今天又翻W3上看了看。这样就很棒棒哦。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;直接使用&lt;br&gt;&lt;figure c
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>git与github</title>
    <link href="http://yoursite.com/2017/11/10/git/"/>
    <id>http://yoursite.com/2017/11/10/git/</id>
    <published>2017-11-10T02:00:00.000Z</published>
    <updated>2017-11-25T12:39:20.040Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>好记性不如烂笔头</p></blockquote><h3 id="设置作者"><a href="#设置作者" class="headerlink" title="设置作者"></a>设置作者</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;miumiu&quot;</span><br><span class="line">git config --global user emial &quot;mozzie-@hotmail.com&quot;</span><br></pre></td></tr></table></figure><h3 id="git命令"><a href="#git命令" class="headerlink" title="git命令"></a>git命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//查看状态</span><br><span class="line">git status</span><br><span class="line">//添加到暂存区</span><br><span class="line">git add index.html</span><br><span class="line">//所有修改的文件提交</span><br><span class="line">git add .</span><br><span class="line">//添加到版本库</span><br><span class="line">git commit</span><br><span class="line">git commit -m &quot;i am 注释&quot;</span><br><span class="line">//工作区直接添加到版本库的简写 -a add -m 注释</span><br><span class="line">git commit -a -m &quot;add script&quot;</span><br></pre></td></tr></table></figure><h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><blockquote><p>在index.js文件里写入一个名字叫做a的function，<br>并git commit -a -m “add function”到版本库<br>紧接着在js里写入var obj = document.getElementById(id);<br>并 git add .<br>最后在js里写入obj.onmousedown = function () {}<br>执行一些命令对比效果如下：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//工作区与暂存区的对比</span><br><span class="line">git diff</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">:![](img/1.jpg)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//暂存区与版本库之间的对比</span><br><span class="line">git diff --cached</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//工作区与版本库之间的对比</span><br><span class="line">git diff master（分支名字</span><br></pre></td></tr></table></figure><h3 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//删除暂存区</span><br><span class="line">git rm &lt;file.name&gt;</span><br><span class="line">//删除暂存区同时删除工作区</span><br><span class="line">git rm -f &lt;file.name&gt;</span><br><span class="line">//删除暂存区保留工作区</span><br><span class="line">git rm -canched &lt;file.name&gt;</span><br></pre></td></tr></table></figure><p>…待更</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;好记性不如烂笔头&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;设置作者&quot;&gt;&lt;a href=&quot;#设置作者&quot; class=&quot;headerlink&quot; title=&quot;设置作者&quot;&gt;&lt;/a&gt;设置作者&lt;/h3&gt;&lt;figure class=&quot;highlig
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/11/09/hello-world/"/>
    <id>http://yoursite.com/2017/11/09/hello-world/</id>
    <published>2017-11-08T16:34:14.000Z</published>
    <updated>2017-11-25T12:33:58.372Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
